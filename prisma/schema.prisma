// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum GameState {
    WAITINGFORPLAYERS
    PLAYING
    ANIMATING
    LIGHTWIN
    DARKWIN
    ABANDONED
}

enum GameSquare {
    EMPTY
    LIGHT
    DARK
}

enum GameType {
    PVPLOCAL
    PVPREMOTE
    BOT
}

enum Turn {
    LIGHT
    DARK
}

datasource db {
    // provider     = "mysql"
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

model Move {
    createdAt DateTime @default(now())
    turn      Turn
    positionX Int
    positionY Int
    positionZ Int
    gameId    String
    game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

    @@id([gameId, positionX, positionY, positionZ])
    @@index([positionX, positionY, positionZ])
    @@index([gameId])
}

model Game {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    startedAt   DateTime?
    state       GameState @default(WAITINGFORPLAYERS)
    turn        Turn
    moves       Move[]
    type        GameType
    host        User      @relation("Host", fields: [hostUserId], references: [id])
    hostUserId  String
    whiteUserId String?
    blackUserId String?
    whitePlayer User?     @relation("BlackGames", fields: [whiteUserId], references: [id])
    blackPlayer User?     @relation("WhiteGames", fields: [blackUserId], references: [id])

    @@index([whiteUserId])
    @@index([blackUserId])
    @@index([hostUserId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    blackGames    Game[]    @relation("BlackGames")
    whiteGames    Game[]    @relation("WhiteGames")
    hostedGames   Game[]    @relation("Host")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
