/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\pieceAnimation.gltf --types 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Piece: THREE.Mesh
  }
  materials: {
    Dark: THREE.MeshPhysicalMaterial,
    Light: THREE.MeshPhysicalMaterial
  }
}

type ActionName = 'PieceAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/pieceAnimation.gltf') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh name="Piece" geometry={nodes.Piece.geometry} material={materials.Dark} position={[0, 14.256, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.015} />
      </group>
    </group>
  )
}

useGLTF.preload('/pieceAnimation.gltf')
