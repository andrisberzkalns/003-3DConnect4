/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 .\pieceAnimation.gltf --types 
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { positionMap, getPos } from '~/components/PositionMap';

type GLTFResult = GLTF & {
    nodes: {
        Piece: THREE.Mesh
    }
    materials: {
        Dark: THREE.MeshPhysicalMaterial,
        Light: THREE.MeshPhysicalMaterial
    }
}

type ActionName = 'PieceAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export const Piece = (props: JSX.IntrinsicElements['group'] & {height: number, pos: THREE.Vector2, isDark: boolean}) => {
    const group = useRef<THREE.Group>()
    const { nodes, materials, animations } = useGLTF('/assets/pieceAnimation.gltf') as GLTFResult
    const { actions, mixer } = useAnimations<GLTFActions>(animations, group)
    useEffect(() => {
        if (animations[0]) {
            const animation = mixer.clipAction(animations[0], group.current);
            animation.setLoop(THREE.LoopOnce, 1);
            animation.clampWhenFinished = true;
            animation.enabled = true;
            animation.play();
        }
    });

    // const positionRow = positionMap[props.pos.x];
    // if (positionRow === undefined) {
    //     return (<></>);
    // }
    // let position = positionRow[props.pos.y];
    // if (position === undefined) {
    //     position = new THREE.Vector2(0, 0);
    // }
    const positions = getPos(props.pos.x, props.pos.y);

    return (
        <group ref={group} {...props} dispose={null} position={[positions.x, 0.29 + (props.height * 0.27), positions.y]}>
            <group name="Scene">
                <mesh name="Piece" geometry={nodes.Piece.geometry} material={props.isDark ? materials.Dark : materials.Light} position={[0, 14.256, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.015} castShadow receiveShadow/>
            </group>
        </group>
    )
}

useGLTF.preload('/assets/pieceAnimation.gltf')
